{"version":3,"sources":["layout/index.js","pages/Posts/index.js","pages/About/index.js","pages/Archive/index.js","App.js","serviceWorker.js","index.js"],"names":["Layout","props","Fragment","className","Brand","to","src","width","height","alt","children","categories","somePosts","posts","slice","map","post","category","Math","floor","random","Posts","useState","postList","categoryList","selectedCategory","setCategory","textLength","setTextLength","handleOptionChange","changeEvent","target","value","thePosts","Item","key","id","variant","title","body","substr","theCategoryOptions","i","type","name","checked","onChange","sm","Title","Body","onSubmit","formSubmitEvent","preventDefault","onSelect","textLengthEvent","Toggle","Menu","eventKey","About","Archive","App","path","component","exact","Boolean","window","location","hostname","match","TheApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1eb7644c.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport './index.scss';\n\nconst Layout = props => {\n  return (\n    <React.Fragment>\n      <div className=\"Navigation\">\n        <Navbar>\n          <Navbar.Brand>\n            <Link to=\"/\">\n              <img\n                src=\"logo.gif\"\n                width=\"50\"\n                height=\"50\"\n                className=\"logo d-inline-block align-top\"\n                alt=\"\"\n              />\n            </Link>\n          </Navbar.Brand>\n          <Nav className=\"blog-menu mr-auto\">\n            <Nav className=\"ml-3\">\n              <Link to=\"/about\">About</Link>\n            </Nav>\n            <Nav className=\"ml-3\">\n              <Link to=\"/archive\">Archive</Link>\n            </Nav>\n          </Nav>\n        </Navbar>\n      </div>\n      <main className=\"Content\">{props.children}</main>\n    </React.Fragment>\n  );\n};\n\nexport default Layout;\n","import React, {useState} from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport './index.scss'\n\n// file obtained by: curl https://jsonplaceholder.typicode.com/posts > posts.json\nimport posts from '../../data/posts.json'\n\nconst categories = ['category1', 'category2', 'category3', 'category4'];\n\nconst somePosts = posts.slice(0, 8).map(post => {\n    return {...post, category: categories[Math.floor(Math.random() * 4)]}\n});\n\nconst Posts = () => {\n    const [postList] = useState(somePosts);\n    const [categoryList] = useState(categories);\n    const [selectedCategory, setCategory] = useState(\"\");\n    const [textLength, setTextLength] = useState(80);\n\n    const handleOptionChange = changeEvent => {\n        setCategory(changeEvent.target.value);\n    };\n\n    const handleFormSubmit = formSubmitEvent => {\n        formSubmitEvent.preventDefault();\n        setCategory(\"\");\n    };\n\n    const handleTextLength = textLengthEvent => {\n        setTextLength(textLengthEvent);\n    };\n\n    const thePosts = postList.map(post => {\n        if (selectedCategory === \"\" || selectedCategory === post.category) {\n            return <ListGroup.Item\n                key={post.id}\n                variant=\"flush\">\n                <h5>{post.title}</h5>\n                {post.body.substr(0, textLength) + '...'}\n                <p><small><strong>{post.category}</strong></small></p>\n            </ListGroup.Item>\n        } else {\n            return null;\n        }\n    });\n\n    const theCategoryOptions = categoryList.map((category, i) => {\n        return <div className=\"form-check\" key={i}>\n            <label>\n                <input\n                    type=\"radio\"\n                    name=\"react-tips\"\n                    value={category}\n                    checked={selectedCategory === category}\n                    onChange={handleOptionChange}\n                    className=\"form-check-input\"\n                />\n                {category}\n            </label>\n        </div>\n    });\n    return (\n        <>\n            <Container className=\"Filter mb-4\">\n                <Row>\n                    <Col className=\"mt-4 p-4\" sm={12}>\n                        <Card>\n                            <Card.Title className=\"px-4 pt-4 pb-0\">Filter by Post category</Card.Title>\n                            <Card.Body>\n                                <form onSubmit={handleFormSubmit}>\n                                    {theCategoryOptions}\n                                    <div className=\"form-group\">\n                                        <div>Show posts with selected category</div>\n                                        <button className=\"btn btn-primary mt-2\" type=\"submit\">\n                                            Clear Selection\n                                        </button>\n                                    </div>\n                                </form>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            <Container className=\"Posts\">\n                <Row>\n                    <Col sm={12}>\n                        <Card>\n                            <Card.Title>Posts <small>(text length: {textLength})</small></Card.Title>\n                            <Dropdown onSelect={handleTextLength} className=\"mx-2 mb-2\">\n                                <Dropdown.Toggle  className={\"mx-2\"} variant={\"primary\"} id={\"post-text-length\"}>\n                                    Set Text Length\n                                </Dropdown.Toggle>\n                                <Dropdown.Menu>\n                                    <Dropdown.Item eventKey={40}>40 Chars</Dropdown.Item>\n                                    <Dropdown.Item eventKey={80}>80 Chars</Dropdown.Item>\n                                    <Dropdown.Item eventKey={120}>120 Chars</Dropdown.Item>\n                                    <Dropdown.Item eventKey={160}>160 Chars</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                            <ListGroup>\n                                {thePosts}\n                            </ListGroup>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    )\n\n};\n\nexport default Posts\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport './index.scss'\n\nconst About = () => {\n  return (\n    <Container className=\"About\">\n      <Row>\n        <Col>\n          <Card><Card.Title>About</Card.Title></Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default About;\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport './index.scss'\n\nconst Archive = () => {\n  return (\n    <Container className=\"Archive\">\n      <Row>\n        <Col>\n          <Card><Card.Title>Archive</Card.Title></Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Archive\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Layout from './layout'\nimport Posts from './pages/Posts'\nimport About from './pages/About'\nimport Archive from './pages/Archive'\n\nconst App = () => (\n  <div>\n    <Layout>\n      <Switch>\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/archive\" component={Archive} />\n        <Route path=\"/\" exact component={Posts} />\n      </Switch>\n    </Layout>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport './custom.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst TheApp = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(TheApp, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}